<beans:beans xmlns="http://www.springframework.org/schema/security" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">
	<!-- 登录界面不使用权限过滤 和403页面 -->
	<http security="none" pattern="/background/randomCode" />
	<http security="none" pattern="/background/403" />
	<http security="none" pattern="/background/timeout" />
	<http security="none" pattern="/background/login" />

	<debug/> 	
	<http  use-expressions="true" entry-point-ref="loginEntryPoint" >
		<custom-filter ref="concurrentSessionFilter" position="CONCURRENT_SESSION_FILTER"/>
		
		<!-- 替换默认的LogoutFilter -->
		 <custom-filter ref="logoutFilter" position="LOGOUT_FILTER" />  
		
		<!-- 替换LoginFilter -->
		<custom-filter ref="customLoginFilter" position="FORM_LOGIN_FILTER" />
	
		<custom-filter ref="rememberMeAuthenticationFilter" position="REMEMBER_ME_FILTER"/> 
		<!-- 定义没有权限访问页面 -->
		<!-- <access-denied-handler error-page="/background/403" /> -->

	
		<!-- 访问url需要的权限 isAuthenticated() permitAll -->
		<intercept-url pattern="/background/**" access="isAuthenticated()" />


		<!-- <csrf /> -->

		<!-- session管理 过期跳转页面 -->
		<!--  <session-management invalid-session-url="/background/timeout" session-fixation-protection="none" > 
		<concurrency-control    max-sessions="1" error-if-maximum-exceeded="true" session-registry-alias="sessionRegistry"/> 
		</session-management>  -->
		
	</http>

<!-- ===========================================================自定义登录切点========================================================================== -->	
	<!-- 登录切点,用来跳转登录页面 -->				
	<beans:bean id="loginEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/background/login"></beans:property>
	</beans:bean>
<!-- ============================================================================================================================================================== -->
	
	
<!-- ===========================================================自定义AuthenticationManager========================================================================== -->
						 <!-- 
						 authentication-manager:认证管理器
						 authentication-provider:可以设定多个provider
						 customProvider:自定义provider,一般用的是DaoAuthenticationProvider
						 rememberMeAuthenticationProvider：可用rememberme进行身份验证
						 -->

	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="customAuthenticationProvider"/>
		<authentication-provider ref="rememberMeAuthenticationProvider"/>
	</authentication-manager>
	
	<!-- 登录认证处理   作用:密码校验(/盐加密)--> 
	<beans:bean id="customAuthenticationProvider" class="com.saltedfish.security.custom.CustomAuthenticationProvider" >
		<!-- 不支持匿名用户登录 -->
		<beans:property name="hideUserNotFoundExceptions" value="true"/> 
		<!-- 自定义UserDetailsService -->
		<beans:property name="userDetailsService" ref="customUserDetailsService"/>
		<!-- 加密方式 --> 
		<beans:property name="passwordEncoder" ref="passwordEncoder"/>
		<!-- 配置加密盐值 -->  
		<beans:property name="saltSource" ref="saltSource"/>
	</beans:bean>
	
	<!-- 自定义UserdetailsService 作用:查询用户，以及所拥有的权限-->
	<beans:bean id="customUserDetailsService" class="com.saltedfish.security.custom.CustomUserDetailsServiceImpl"/>
	
	 <!-- 加密方式 -->  
     <beans:bean id="passwordEncoder"  
         class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />  
   
     <!-- 配置加密盐值 -->  
     <beans:bean id="saltSource"  
         class="org.springframework.security.authentication.dao.ReflectionSaltSource">  
         <!-- 加密盐为      MD5(密码{登录名})  -->
         <beans:property name="userPropertyToUse" value="username" />  
     </beans:bean>  
 <!-- ============================================================================================================================================================== -->    
     
     
     
<!-- ===========================================================自定义UsernamePasswordAuthenticationFilter========================================================================== -->
					<!-- 
					customLoginFilter:自定义的UsernamePasswordAuthenticationFilter.
					sessionAuthenticationStrategy:session认证策略(账号登陆(可以在相同IP登录多次,如果已经登录,则不同IP登录则不行))
					filterProcessesUrl:过滤器拦截的Url(表单提交的Url)
					authenticationManager:认证管理器(认证操作)
					usernameParameter:表单 登录账号 name属性为 username
					passwordParameter:表单登录密码 name属性为password
					authenticationSuccessHandler:认证成功跳转的Url
					authenticationFailureHandler:认证失败跳转的Url
				 	-->

	<beans:bean id="customLoginFilter" class="com.saltedfish.security.custom.CustomLoginFilter">
		<beans:property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy"/>
		<beans:property name="filterProcessesUrl" value="/background/check" />
		<!-- 加入rememberMeservice -->
		<beans:property name="rememberMeServices" ref="rememberMeServices"/>
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="usernameParameter" value="username" />
		<beans:property name="passwordParameter" value="password" />
		<beans:property name="authenticationSuccessHandler" ref="customLoginHandler"/>
		<beans:property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler"/>
	</beans:bean>
	
	<beans:bean id="customLoginHandler" class="com.saltedfish.security.custom.CustomLoginHandler">
		<beans:property name="defaultTargetUrl" value="/background/index" />
	</beans:bean>
	<beans:bean id="simpleUrlAuthenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/background/login?error" />
	</beans:bean>	
<!-- ============================================================================================================================================================================= -->


<!-- ===========================================================自定义LogoutFilter========================================================================== -->
				 <!-- 
				 logoutFilter:logoutUrl拦截器，filterProcessesUrl:拦截器要拦截的的Url地址
				 cookieClearingLogoutHandler ：退出cookie处理者 ，删除 以JSESSIONID作为key的session
				 securityContextLogoutHandler：退出认证对象处理者  
				 Remeber Me 的 Handler 
				 PersistentTokenBasedRememberMeServices：配置了持久化属性时的handler.1.清除cookie；2.从持久化中清除remember me数据  
				 TokenBasedRememberMeServices :未配置持久化属性的handler。仅仅清除cookie 
				 其实主要调用logout方法
				 -->

	<beans:bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter ">
			<beans:property name="filterProcessesUrl" value="/background/loginout"/>
			<beans:constructor-arg index="0" type="java.lang.String" value="/background/login?error" />			
			<beans:constructor-arg  index="1">
				<beans:array>
					<beans:ref bean="cookieClearingLogoutHandler"/>
					<beans:ref bean="securityContextLogoutHandler"/>
					<beans:ref bean="rememberMeServices"/>
				</beans:array>
			</beans:constructor-arg>
	</beans:bean>

	<!-- 退出cookie处理者 -->
	<beans:bean id="cookieClearingLogoutHandler" class="org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler">
		<beans:constructor-arg>
			<beans:array>
				<beans:value>JSESSIONID</beans:value><!-- session 以JsessionId为key -->
			</beans:array>				
		</beans:constructor-arg> 
	</beans:bean>
	<!-- 退出认证对象处理者 -->
	<beans:bean id="securityContextLogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
<!-- ===================================================================================================================================================== -->	


<!-- ===========================================================自定义RememberMeAuthenticationFilter========================================================================== -->
					<!-- 
					rememberMeAuthenticationFilter:过滤器
					authenticationManager: 如果cookie有效，则根据userName 调用loadByUserName 返回认证对象
					rememberMeServices:持久化rememberMe
					A9RXpzkXRerpuVonTKaa+Q：必须和remeberMeAuthenticationProvider 的key相等（可替换）
					JdbcTokenRepositoryImpl:使用默认的jdbc操作数据库
					createTableOnStartup：如果没有这张表是否创建	
					rememberMeAuthenticationProvider:可以通过这个提供认证实体				
					-->
	<beans:bean id="rememberMeAuthenticationFilter" class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
		<beans:constructor-arg index="0" ref="authenticationManager"/>
		<beans:constructor-arg index="1" ref="rememberMeServices"/>
		<beans:property name="authenticationSuccessHandler" ref="customLoginHandler"/>
	</beans:bean>
	
	
	<beans:bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
	 	<beans:constructor-arg index="0" value="A9RXpzkXRerpuVonTKaa+Q"/>
		<beans:constructor-arg index="1" ref="customUserDetailsService"/>
		<beans:constructor-arg index="2">
			<beans:bean class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl">
	            <beans:property name="dataSource" ref="dataSource"/>
	            <beans:property name="createTableOnStartup" value="false"/>
			</beans:bean>
		</beans:constructor-arg>
		<!-- 页面rememberMe name属性 -->
		<beans:property name="parameter" value="rememberMe"/>
		
	</beans:bean>
	
	
	<beans:bean id="rememberMeAuthenticationProvider" class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
		<beans:property name="key" value="A9RXpzkXRerpuVonTKaa+Q"/>
	</beans:bean>
<!-- ================================================================自定义sessionManageMentFilter================================================================================ -->
					<!-- 
					sessionManagementFilter: SESSION固化保护,以及并发控制
					securityContextRepository:生成HttpSessionSecurityContextRepository
					sessionAuthenticationStrategy:SESSION并发配置
					maximumSessions:允许的最大session个数
					exceptionIfMaximumExceeded:是否抛出异常
					-->

	<beans:bean id="sessionManagementFilter" class="org.springframework.security.web.session.SessionManagementFilter">
		<beans:constructor-arg name="securityContextRepository" ref="securityContextRepository"/>
		<beans:property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy"/>
	</beans:bean>

	<beans:bean id="sessionRegistry" class="com.saltedfish.security.custom.session.CustomSessionRegistryImpl" /> 
	

	<!-- 生成HttpSessionSecurityContextRepository -->  
    <beans:bean id="securityContextRepository"  class="org.springframework.security.web.context.HttpSessionSecurityContextRepository">  
        <beans:property name="allowSessionCreation" value="true" />  
        <beans:property name="disableUrlRewriting" value="false" />  
    </beans:bean>  
<!-- ============================================================================================================================================================================ -->

<!-- ================================================================自定义concurrentSessionFilter(session并发过滤器)=================================================================== -->
				<!-- 
				sessionRegistry: SESSION缓存，包括用户信息
				expiredUrl:session失效跳转页面
				logoutHandlers:退出处理
				maximumSessions:同一个账号允许的最大session个数
				exceptionIfMaximumExceeded:若当前maximumSessions=1时，
	        	             当设置为true，同一账户登录会抛出SessionAuthenticationException异常，异常信息为：Maximum sessions of {0} for this principal exceeded；
	  	                                     当设置为false，不会报错，则会让同一账户最先认证的session过期。
				-->
	
	<beans:bean id="concurrentSessionFilter"  class="org.springframework.security.web.session.ConcurrentSessionFilter">  
	    <beans:property name="sessionRegistry" ref="sessionRegistry" />  
	    <beans:property name="expiredUrl" value="/background/timeout" />  
	    <beans:property name="logoutHandlers">  
	        <beans:list>  
	            <beans:ref bean="cookieClearingLogoutHandler"/>
				<beans:ref bean="securityContextLogoutHandler"/>
	        </beans:list>  
	    </beans:property>  
	</beans:bean>  
    
	<!-- SESSION并发配置 -->  
	<beans:bean id="sessionAuthenticationStrategy" class="com.saltedfish.security.custom.session.CustomConcurrentSessionControlStrategy">  
		  <beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />  
		  <beans:property name="maximumSessions" value="1" />  
		  <beans:property name="exceptionIfMaximumExceeded" value="true" />  
 	</beans:bean>  
<!-- ======================================================================================================================================================== -->

 <!-- =============================================================================其他配置=========================================================================== -->	
	<!-- 自定义异常信息 -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basename" value="classpath:security/messages_custom" />
	</beans:bean> 	
 	
 	
</beans:beans> 